// <auto-generated />
using System;
using MedHelper.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MedHelper.DAL.Migrations
{
    [DbContext(typeof(MedHelperDB))]
    partial class MedHelperDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MedHelper.DAL.Entities.Composition", b =>
                {
                    b.Property<int>("CompositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CompositionID");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Disease", b =>
                {
                    b.Property<int>("DiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("DiseaseID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PharmacotherapeuticGroupID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("MedicineID");

                    b.HasIndex("PharmacotherapeuticGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineComposition", b =>
                {
                    b.Property<int>("MedicineCompositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompositionID")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineID")
                        .HasColumnType("integer");

                    b.HasKey("MedicineCompositionID");

                    b.HasIndex("CompositionID");

                    b.HasIndex("MedicineID");

                    b.ToTable("MedicineComposition");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineContraindication", b =>
                {
                    b.Property<int>("MedicineContraindicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineID")
                        .HasColumnType("integer");

                    b.HasKey("MedicineContraindicationID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("MedicineID");

                    b.ToTable("MedicineContraindication");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineInteraction", b =>
                {
                    b.Property<int>("MedicineInteractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompositionID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MedicineID")
                        .HasColumnType("integer");

                    b.HasKey("MedicineInteractionID");

                    b.HasIndex("CompositionID");

                    b.HasIndex("MedicineID");

                    b.ToTable("MedicineInteraction");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("PatientID");

                    b.HasIndex("UserID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PatientDisease", b =>
                {
                    b.Property<int>("PatientDiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("PatientDiseaseID");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDisease");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PatientMedicine", b =>
                {
                    b.Property<int>("PatientMedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MedicineID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.HasKey("PatientMedicineID");

                    b.HasIndex("MedicineID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientMedicine");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PharmacotherapeuticGroup", b =>
                {
                    b.Property<int>("PharmacotherapeuticGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("PharmacotherapeuticGroupID");

                    b.ToTable("PharmacotherapeuticGroups");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("UserRole")
                        .HasColumnType("text");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Pass")
                        .HasColumnType("text");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.PharmacotherapeuticGroup", "Group")
                        .WithMany("Medicines")
                        .HasForeignKey("PharmacotherapeuticGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.User", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineComposition", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Composition", "Composition")
                        .WithMany("MedicineCompositions")
                        .HasForeignKey("CompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", "Medicine")
                        .WithMany("MedicineCompositions")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineContraindication", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Disease", "Disease")
                        .WithMany("MedicineContraindications")
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", "Medicine")
                        .WithMany("MedicineContraindications")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineInteraction", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Composition", "Composition")
                        .WithMany("MedicineInteractions")
                        .HasForeignKey("CompositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", "Medicine")
                        .WithMany("MedicineInteractions")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Patient", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PatientDisease", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Disease", "Disease")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Patient", "Patient")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PatientMedicine", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Medicine", "Medicine")
                        .WithMany("PatientMedicines")
                        .HasForeignKey("MedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Patient", "Patient")
                        .WithMany("PatientMedicines")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.User", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Composition", b =>
                {
                    b.Navigation("MedicineCompositions");

                    b.Navigation("MedicineInteractions");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Disease", b =>
                {
                    b.Navigation("MedicineContraindications");

                    b.Navigation("PatientDiseases");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineCompositions");

                    b.Navigation("MedicineContraindications");

                    b.Navigation("MedicineInteractions");

                    b.Navigation("PatientMedicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Patient", b =>
                {
                    b.Navigation("PatientDiseases");

                    b.Navigation("PatientMedicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PharmacotherapeuticGroup", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.User", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
