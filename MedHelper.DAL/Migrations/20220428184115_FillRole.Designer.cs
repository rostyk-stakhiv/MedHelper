// <auto-generated />
using System;
using MedHelper.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MedHelper.DAL.Migrations
{
    [DbContext(typeof(MedHelperDBContext))]
    [Migration("20220428184115_FillRole")]
    partial class FillRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CompositionMedicine", b =>
                {
                    b.Property<int>("CompositionsId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicinesId")
                        .HasColumnType("integer");

                    b.HasKey("CompositionsId", "MedicinesId");

                    b.HasIndex("MedicinesId");

                    b.ToTable("MedicineComposition");
                });

            modelBuilder.Entity("DiseaseMedicine", b =>
                {
                    b.Property<int>("ContraindicationsId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineContraindicationsId")
                        .HasColumnType("integer");

                    b.HasKey("ContraindicationsId", "MedicineContraindicationsId");

                    b.HasIndex("MedicineContraindicationsId");

                    b.ToTable("MedicineContraindication");
                });

            modelBuilder.Entity("DiseasePatient", b =>
                {
                    b.Property<int>("DiseasesId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("DiseasesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("PatientDisease");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Composition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PharmacotherapeuticGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacotherapeuticGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompositionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompositionId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineInteraction");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PharmacotherapeuticGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PharmacotherapeuticGroups");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("UserRole")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicinePatient", b =>
                {
                    b.Property<int>("MedicinesId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("MedicinesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("PatientMedicine");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CompositionMedicine", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Composition", null)
                        .WithMany()
                        .HasForeignKey("CompositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiseaseMedicine", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Disease", null)
                        .WithMany()
                        .HasForeignKey("ContraindicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicineContraindicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiseasePatient", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.PharmacotherapeuticGroup", "Group")
                        .WithMany("Medicines")
                        .HasForeignKey("PharmacotherapeuticGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.User", "User")
                        .WithMany("Medicines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.MedicineInteraction", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Composition", "Composition")
                        .WithMany("MedicineInteractions")
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Medicine", "Medicine")
                        .WithMany("MedicineInteractions")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Patient", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicinePatient", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Medicine", null)
                        .WithMany()
                        .HasForeignKey("MedicinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("MedHelper.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelper.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Composition", b =>
                {
                    b.Navigation("MedicineInteractions");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.Medicine", b =>
                {
                    b.Navigation("MedicineInteractions");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.PharmacotherapeuticGroup", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("MedHelper.DAL.Entities.User", b =>
                {
                    b.Navigation("Medicines");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
